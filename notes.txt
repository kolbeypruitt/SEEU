code = Rule.all.last.rule.to_s
=> "if (Sensor.where(\"name = 'Sensor1'\").first.readings.last.data > 0.to_s) then\r\na = Actuator.where(\"name = 'actuator1'\").first;\r\na.command.data = 1;\r\na.save\r\nend"

result = eval(code)
=> true


irb(main):> Rule.all.each do |r|
irb(main):* code = r.rule.to_s
irb(main):> result = eval(code)
irb(main):> end


        <!-- ##### -->
        <!-- RULES -->
        <!-- ##### -->
        <div id="rules">
          <% @rules.each do |rule| %>
            <%= rule.rule %><br />
          <% end %>
        </div>

        <hr/>

        <div id="rules">
          <h3>Rules</h3>

          <%= form_tag do %>
            <% operators_array = [">", ">=", "=", "=<", "<"] %>
            <% values_array = Array.new(16) { |i| 65+i } %>
            <% conditionals_array = ["", "and", "or"] %>

            if <%= collection_select(:sensor, :sensor_id, Sensor.all, :name, :name ) %>
              <%= select(:operator, :operator, operators_array) %>
              <%= select(:value, :value, values_array) %>
              <%= select(:conditional, :conditional, conditionals_array) %>
            <br/>
            then set <%= collection_select(:actuator, :actuator_id, Actuator.all, :name, :name) %> to
              <%= select(:value, :value, values_array) %>
            <br/>
            <%= submit_tag("Create Rule") %>
          <% end %>
          <br/>

          <hr/>

          <div id="click-rules">
            <h3>Options</h3>

            <div id="rules-if" style="display: block">
              <span class="clickable" style="display:inline">if</span>
            </div> <!-- rules-if -->

            <div id="rules-conditionals" style="display: block">
              <span class="clickable" style="display:none">then</span>
              <span class="clickable" style="display:none">and</span>
              <span class="clickable" style="display:none">or</span>
            </div> <!-- rules-conditionals -->

            <div id="rules-operators">
             <span class="clickable" style="display:none">greater than</span>
             <span class="clickable" style="display:none">greater than or equal to</span>
             <span class="clickable" style="display:none">equal to</span>
             <span class="clickable" style="display:none">less than</span>
             <span class="clickable" style="display:none">less than or equal to</span>
            </div> <!-- rules-operators -->

            <div id="rules-sensors">
              <% Sensor.all.each do |s| %>
              <span class="clickable" style="display:none"><%= s.name %></span>
              <% end %>
            </div> <!-- rules-sensors -->

            <div id="rules-actuators">
              <% Actuator.all.each do |a| %>
              <span class="clickable" style="display:none"><%= a.name %></span>
              <% end %>
            </div> <!-- rules-actuators -->

            <div id="rules-sensor-values">
              <span class="editable" style="display:none">Input #</span>
            </div> <!-- rules-values -->

            <div id="rules-actuator-values">
              <span class="editable" style="display:none">Input #</span>
            </div> <!-- rules-actuator-values -->
          </div> <!-- click-rules -->

          <div id="click-rules-written">
            <h3>Rule</h3>
          </div>

          <%= form_tag do %>
          <%= submit_tag("Create Rule") %>
          <% end %>

          <script>
            function enableButtons(clickedText, clickedDiv) {
              disableButtonsInDiv("click-rules");


              if ( clickedDiv == "rules-if" ) {
                enableButtonsInDiv("rules-sensors");
              } else if ( clickedDiv == "rules-conditionals" ) {
                if ( clickedText == "then" ) {
                  enableButtonsInDiv("rules-actuators");
                } else {
                  enableButtonsInDiv("rules-sensors");
                }
              } else if ( clickedDiv == "rules-sensor-values" ) {
                enableButtonsInDiv("rules-conditionals");
              } else if ( clickedDiv == "rules-actuator-values" ) {
                //the rule ends with an actuator value
              } else if ( clickedDiv == "rules-sensors" ) {
                enableButtonsInDiv("rules-operators");
              } else if ( clickedDiv == "rules-actuators" ) {
                enableButtonsInDiv("rules-actuator-values");
              } else if ( clickedDiv == "rules-operators" ) {
                enableButtonsInDiv("rules-sensor-values");
              } else {
                alert("clickedText = " + clickedText + "\n clickedDiv = " + clickedDiv);
              }
            }

            function enableProperButtons(inputText) {
              disableButtonsInDiv("click-rules");
              if (inputText == "rules-if") {
                enableButtonsInDiv("rules-sensors");
              } else if (inputText == "rules-conditionals") {
                enableButtonsInDiv("rules-actuators");
              } else if (inputText == "rules-values") {
                enableButtonsInDiv("rules-conditionals");
              } else if (inputText == "rules-sensors") {
                enableButtonsInDiv("rules-operators");
              } else if (inputText == "rules-actuators") {
                enableButtonsInDiv("rules-values");
              } else if (inputText == "rules-operators") {
                enableButtonsInDiv("rules-values");
              } else {
                alert(inputText);
              }
            }
            function disableButtonsInDiv(inputDiv) {
              $('div#' + inputDiv + ' span').each(function () {
                  //$(this).css('visibility', 'hidden');
                  $(this).css('display', 'none');
                });
            }
            function enableButtonsInDiv(inputDiv) {
              $('div#' + inputDiv + ' span').each(function () {
                  //$(this).css('visibility', 'visible');
                  $(this).css('display', 'inline');
                });
            }

            $("span.clickable").click(function () {
              var buttonText = $(this).html();
              var buttonDiv = $(this).parent("div").attr("id");


              $("div#click-rules-written").append(buttonText+' ');
              enableButtons( buttonText, buttonDiv );
            });
            $("span.clickable").hover(function () {
              $(this).addClass("hilite");
            }, function () {
              $(this).removeClass("hilite");
            });

            $("span.editable").click(function () {
              var buttonDiv = $(this).parent("div").attr("id");

              $(this).replaceWith('<form id="editable"><input type="text" size="8" maxlength="8" id="buttonText" value="'+$(this).html()+'"></form>');
                $("form#editable").submit(function () {
                  var buttonText = $("#buttonText").val();
                  $("form#editable").remove();

                  $("div#click-rules-written").append(buttonText +' ');
                  enableButtons( buttonText, buttonDiv );

                  return false;
                });
                return false;
            });
            $("span.editable").hover(function () {
              $(this).addClass("hilite");
            }, function () {
              $(this).removeClass("hilite");
            });
          </script>
          <hr/>

       </div> <!-- rules -->





  def run_rules()
    a = Actuator.find(1).command
    @reading = Reading.find(params[:id])

    ### previous attempts
    # works, but is not general
#   if Sensor.find(1).readings.find(1).data.to_s == "1"
#   end

    # works, but is longer than accessing reading directly
#   if Sensor.find(params[:sensor_id]).readings.find(params[:id]).data.to_s == "1"
#   end

    if Reading.find(params[:id]).data.to_s == "1"
      a.data = "1"
    else
      a.data = "0"
    end
    a.save
  end

# maybe try something like this...
# create a rules database
# r = Rules.find(params[:sensor_id])
# r.each do |r|
#   #test rule
# end
#
# if (Sensor.find(#).readings.last.data or Sensor.find(r[i].sensor).readings.last.data r[i].operator r[i].threshold)
#   a = Actuator.find(r[i].actuator)
#   a.command.data = r[i].output
#   a.save
# end

########
@readings = @sensor.readings.find(:all, :order => "created_at DESC", :limit => 3)



########
database -> interface work
########
r2components = Rule.find(2).rule.split(" ")
r2sensors = []
r2sensordata = []
r2actuators = []
r2actuatordata = []
r2components.each do |r2c|
	put 'r2c =',r2c
	if (r2c.include? "Sensor.where")
		r2sensors.push(r2c)
	end
	if (r2c.include? "readings.last.data")
		r2sensordata.push(r2c)
	end
	if (r2c.include? "Actuator.where")
		r2actuators.push(r2c)
	end
	if (r2c.include? "command.data")
		r2actuatordata.push(r2c)
	end
end
r2sensors
r2sensordata
r2actuators
r2actuatordata

######
getting device name
######
r2sensors.last.split('.')[1].split("'")[1]
## OR ##
r2sensors.last.split("'")[1]
r2actuators.last.split("'")[1]

#####
getting sensor operator
#####
r2sensordata.last.split("data")[1].split(".")[0].split(/[\d\w]/)[0]

#####
getting actuator operator is not necessary because it's always =
#####

#####
getting sensor value
######
r2sensordata.last.split(/[<=>]/)[2].split(".")[0]
r2sensordata.last.split(".")[5].split(/[<>=]/)[1]

#####
getting actuator value
#####
r2actuatordata.last.split(/=/)[1]


###########
<!-- TAKE DATABASE RULE AND MAKE IT INTO INTERFACE -->
<%= @rule.rule %><br/>
<h4>components</h4>
<% @rule_components = @rule.rule.split(" ") %>
<% @rule_components.each do |rc| %>
rule_component = <%= rc %><br/>
<% 
  if (rc.include? "Sensor.where")
    @rule_sensors.push(rc)
  end
  if (rc.include? "readings.last.data")
    @rule_sensor_data.push(rc)
  end
  if (rc.include? "Actuator.where")
    @rule_actuators.push(rc)
  end
  if (rc.include? "command.data")
    @rule_actuator_data.push(rc)
  end
%>
<% end %>
<hr/>
@rule_sensors.push(rc) = <%= @rule_sensors %><br/>
@rule_sensor_data.push(rc) = <%= @rule_sensor_data %><br/>
@rule_actuators.push(rc) = <%= @rule_actuators %><br/>
@rule_actuator_data.push(rc) = <%= @rule_actuator_data %><br/>
<hr/>
<%
@rule_sensors         = @rule_sensors.last.split("'")[1]
@rule_actuators       = @rule_actuators.last.split("'")[1]
@rule_actuator_data   = @rule_actuator_data.last.split(/=/)[1].split(/[;]/)[0]
@rule_sensor_operator = @rule_sensor_data.last.split("data")[1].split(".")[0].split(/[\d\w]/)[0]
@rule_sensor_data     = @rule_sensor_data.last.split(/[<=>]/)[2].split(".")[0]
%>
if <%= @rule_sensors %>
<%= @rule_sensor_operator %>
<%= @rule_sensor_data %>
then set 
<%= @rule_actuators %> to <%= @rule_actuator_data %>
<hr/>
<div class="hidden" style="display:none">
